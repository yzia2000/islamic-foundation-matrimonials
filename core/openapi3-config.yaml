openapi: 3.0.0
info:
  description: |
    API for Islamic Foundation Matrimonials.
  version: "1.0.0"
  title: Islamic Foundation Matrimonials
  contact:
    email: yzia2000@gmail.com
  license:
    name: MIT License
    url: 'https://mit-license.org/'
tags: 
  - 
    name: "auth"
    description: "Authentication routes"
    externalDocs: 
      description: "Find out more"
      url: "http://swagger.io"
  - 
    name: "data"
    description: "Data routes"
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/yzia2000/IFMAPI/1.0.0
  - description: API
    url: https://if-matrimonials.herokuapp.com/
  - url: 'http://localhost:5000'

paths:
  /auth/signup:
    post:
      tags:
        - auth
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/User'
  /auth/login:
    get:
      tags:
        - auth
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: email
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username/password supplied
        '500':
          description: Server error
  /data:
    get:
      tags:
        - data
      summary: Gets personal data from database
      operationId: getData
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
        '500':
          description: Server error
components:
  schemas:
    User:
      type: object
      required:
        - handle
        - email
        - firstname
        - lastname
        - gender
      properties:
        id:
          type: integer
          format: int64
        handle:
          type: string
          description: Handle of the user
        email:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        gender:
          type: string
          enum:
            - Male
            - Female
      xml:
        name: User

    Education:
      type: object
      required:
        - level
        - institution
      properties:
        level:
          type: string
          enum:
            - Primary
            - Secondary
            - Undergraduate
            - Postgraduate
        institution:
          type: string
        major:
          type: string
        subject:
          type: array
          items:
            type: string
        awards:
          type: array
          items:
            type: string
        extraCurriculurs:
          type: array
          items:
            type: string 
        name:
          type: string
      xml:
        name: Education
    
    Religion:
      type: object
      required:
        - school
      properties:
        school:
          type: string
          enum:
            - Hanafi
            - Shafei
            - Hanbali
            - Maliki
            - Other
      xml:
        name: Religion
    
    Employment:
      type: object
      required:
        - role
        - company
      properties:
        role:
          type: string
        company:
          type: string
        description:
          type: string
      xml:
        name: Employment
          
    Biodata:
      type: object
      properties:
        gender:
          type: string
          enum:
            - Male
            - Female
        educationHistory:
          type: array
          items:
            $ref: '#/components/schemas/Education'
        employmentHistory:
          type: array
          items:
            $ref: '#/components/schemas/Employment'
        religion:
          $ref: '#/components/schemas/Religion'
      xml:
        name: Biodata
  requestBodies:
    User:
      content:
        application/json:
          schema:
            type: object
            properties:
              firstname:
                type: string
              lastname:
                type: string
              email:
                type: string
              password:
                type: string
              handle:
                type: string    
              gender:
                type: string
                enum:
                  - Male
                  - Female
      description: User object
      required: false
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
